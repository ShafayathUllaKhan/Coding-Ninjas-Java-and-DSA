echo "# Coding-Ninjas-Java-and-DSA" >> README.md
git init
git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/ShafayathUllaKhan/Coding-Ninjas-Java-and-DSA.git
git push -u origin main

eclipse terminal commands

Admin@DESKTOP-J2D17B8 MINGW64 ~
$ cd Java_and_DSA
bash: cd: Java_and_DSA: No such file or directory

Admin@DESKTOP-J2D17B8 MINGW64 ~
$ 

Admin@DESKTOP-J2D17B8 MINGW64 ~
$ cd Java_and_DSA
bash: cd: Java_and_DSA: No such file or directory

Admin@DESKTOP-J2D17B8 MINGW64 ~
$ cd /c/Users/Admin/eclipse-workspace/Java_and_DSA

Admin@DESKTOP-J2D17B8 MINGW64 ~/eclipse-workspace/Java_and_DSA
$ 

Admin@DESKTOP-


Admin@DESKTOP-J2D17B8 MINGW64 ~/eclipse-workspace/Java_and_DSA (main)
$ git remote -v

Admin@DESKTOP-J2D17B8 MINGW64 ~/eclipse-workspace/Java_and_DSA (main)           and-DSA.git
$ git remote add origin https://github.com/ShafayathUllaKhan/Coding-Ninjas-Java-
and-DSA.git

Admin@DESKTOP-J2D17B8 MINGW64 ~/eclipse-workspace/Java_and_DSA (main)           ch)
$ git remote -v                                                                 h)
origin  https://github.com/ShafayathUllaKhan/Coding-Ninjas-Java-and-DSA.git (fet
ch)
origin  https://github.com/ShafayathUllaKhan/Coding-Ninjas-Java-and-DSA.git (pus
h)

Admin@DESKTOP-J2D17B8 MINGW64 ~/eclipse-workspace/Java_and_DSA (main)
$ git add .

Admin@DESKTOP-J2D17B8 MINGW64 ~/eclipse-workspace/Java_and_DSA (main)
$ git commit -m "latest commit"
[main (root-commit) 2e6c2a0] latest commit
 8 files changed, 104 insertions(+)       
 create mode 100644 .classpath
 create mode 100644 .project
 create mode 100644 .settings/org.eclipse.core.resources.prefs
 create mode 100644 .settings/org.eclipse.jdt.core.prefs
 create mode 100644 bin/Chapter_1/notes.txt
 create mode 100644 bin/module-info.class
 create mode 100644 src/Chapter_1/notes.txt
 create mode 100644 src/module-info.java

Admin@DESKTOP-J2D17B8 MINGW64 ~/eclipse-workspace/Java_and_DSA (main)
$ git push -u origin main
Enumerating objects: 13, done.
Counting objects: 100% (13/13), done.
Delta compression using up to 4 threads
Compressing objects: 100% (11/11), done.
Writing objects: 100% (13/13), 1.78 KiB | 151.00 KiB/s, done.
Total 13 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
To https://github.com/ShafayathUllaKhan/Coding-Ninjas-Java-and-DSA.git
 * [new branch]      main -> main
branch 'main' set up to track 'origin/main'.

Admin@DESKTOP-J2D17B8 MINGW64 ~/eclipse-workspace/Java_and_DSA (main)
$

java it is a programming language 


🔁 Relationship:
When your computer starts:

CPU wakes up and talks to the motherboard.

It looks into the SSD for the bootloader and operating system (e.g., Windows or Linux).

The OS is loaded into RAM, and the CPU begins executing OS instructions.


🔄 Who Does What?
🧠 1. Motherboard Starts First
When you power on your laptop, the motherboard activates.

It contains a special chip called BIOS or UEFI firmware.

⚙️ 2. BIOS/UEFI Wakes Up the CPU
BIOS checks all hardware: RAM, CPU, storage, keyboard, etc. (this is called POST – Power-On Self-Test).

Then it tells the CPU:
👉 “Here's where to look for the operating system.”

🚀 3. CPU Finds the OS Boot Loader
The CPU executes the BIOS instructions and looks into storage (usually your SSD’s C: drive) for:

MBR (Master Boot Record) or

EFI Boot Loader

🧠 This boot loader tells the CPU:
“Here’s how to start Windows / Linux / any OS.”

📌 Final Chain of Command (Simplified):
text
Copy
Edit
Power Button Pressed
         ↓
Motherboard (BIOS/UEFI starts)
         ↓
BIOS tells CPU to load boot loader from SSD
         ↓
CPU loads OS into RAM
         ↓
You see login screen!
🧠 Summary:
Component	Role
Motherboard	Coordinates everything; BIOS/UEFI tells CPU where OS is located
CPU	Executes instructions to load OS from SSD into RAM
RAM	Temporarily holds OS and apps while you're using them
SSD (C: drive)	Stores the OS (Windows/Linux), apps, and user files permanently



javac helloword.java --> compliles and create byte code 
java helloworld --> calls jvm and convert the byte code to machine code and helloworld is class name

jdk 
Yes, the JDK includes the Java Compiler (javac) — and that's what converts Java source code into bytecode.

dev tools + jre --> classes packages + jvm 

“RAM holds the data, but OS shows the data.”

//		 "'\u000'"











