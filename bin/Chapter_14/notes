polymorphism --> complile time and runtime

compile time --> static or early binding
// function overloading
public class ShapeUSe {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

		Rectangle r1 = new Rectangle();
		Rectangle r2 = new Rectangle(3,4);
		
		r2.info();
		r2.info("rectangle");
	}
}

public class Rectangle extends Shape{

	int length;
	int breadth;
	
	Rectangle(){
		System.out.println("Rectangle default constructor");
	}
	
	Rectangle(int length,int breadth){
		this.length = length;
		this.breadth = breadth;
	}
	
	public void info() {
		System.out.println("length "+length+"breadth "+ breadth);
	}
	
	public void info(String type) {
		System.out.println(type + " "+"length "+length+"breadth "+ breadth);
	}
}

// polymorphism run time --> dynamic or late binding
public static void main(String[] args) {
		// TODO Auto-generated method stub

		Scanner sc = new Scanner(System.in);
		Rectangle r1 = new Rectangle();
		Rectangle r2 = new Rectangle(3,4);
		
		r2.info();
		r2.info("rectangle");
		
		Shape s = new Shape();
		s.draw();
		
		int num = sc.nextInt();
		
		if(num < 10) {
			s = new Circle();
		}else {
			s = new Rectangle();
		}
		
		s.draw();
		Circle c = new Circle();
		c.draw();
		
		Rectangle r = new Rectangle();
		r.draw();
		
		// run time polymorphism
		Shape s2 = new Circle();
		s2.draw();// Circle drawn
		s2 = new Rectangle();
		s2.draw();// Rectangle drawn
		
		// s2.radius = 10;// radius cannot be resolved or is not a field compiler is creating a problem here 
	}

// final
final variable 
final method no overriding
final class no extend
string class is final( String str)














